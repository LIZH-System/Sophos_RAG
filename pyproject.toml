[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sophos_rag"
version = "0.1.0"
description = "A Retrieval-Augmented Generation (RAG) system"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
authors = [
    {name = "LIZH-System", email = "your.email@example.com"}
]
dependencies = [
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "torch>=1.10.0",
    "transformers>=4.15.0",
    "sentence-transformers>=2.2.0",
    "faiss-cpu>=1.7.0",
    "chromadb>=0.4.0",
    "openai>=1.0.0",
    "nltk>=3.6.0",
    "spacy>=3.2.0",
    "beautifulsoup4>=4.10.0",
    "python-docx>=0.8.11",
    "PyPDF2>=2.0.0",
    "fastapi>=0.95.0",
    "uvicorn>=0.15.0",
    "pydantic>=1.9.0",
    "tqdm>=4.62.0",
    "pyyaml>=6.0",
    "python-dotenv>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.1.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.931",
    "sphinx>=4.3.0",
    "sphinx-rtd-theme>=1.0.0",
]
gpu = [
    "faiss-gpu>=1.7.0",
]

[project.scripts]
sophos_rag = "sophos_rag.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["sophos_rag*"]
exclude = ["api*", "tests*", "examples*", "notebooks*"]

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--cov=sophos_rag --cov-report=term-missing"

[tool.coverage.run]
source = ["sophos_rag"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
] 